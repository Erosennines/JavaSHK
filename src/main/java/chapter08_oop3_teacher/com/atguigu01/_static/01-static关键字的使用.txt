static关键字的使用

1. static：静态的
2. static用来修饰的结构：属性、方法、代码块、内部类；（构造器不能用static修饰）
3. static修饰属性：
    3.1 复习：变量的分类
        方式1：按照数据类型：基本数据类型、引用数据类型
        方式2：按照类中声明的位置
            成员变量：按照是否使用static进行分类
                使用：静态变量/类变量
                不使用：非静态变量/实例变量

            局部变量：方法内、方法形参、构造器内、构造器形参、代码块内等。

    3.2 静态变量：类中的属性使用static进行修饰
        对比静态变量和实例变量：
        ①个数
        > 静态变量：在内存空间中只有1份，被类的多个对象所共享
        > 实例变量：类的每一个实例（或对象）都保存着一份实例变量
        ②内存位置
        > 静态变量：堆空间
        > 实例变量：堆空间中的对象实体中
        ③加载时机
        > 静态变量：随着类的加载而加载，由于类之后加载一次，所以静态变量也只有一份。
        > 实例变量：随着对象的创建而加载。每个对象拥有一份实例变量。
        ④调用者
        > 静态变量：可以被类直接调用，也可以使用对象调用
        > 实例变量：只能使用对象调用
        ⑤判断是否可以调用 -> 从生命周期角度解释
        ⑥消亡时机
        > 静态变量：随着类的卸载而消亡
        > 实例变量：随着对象的消亡而消亡

4. static修饰方法：（类方法/静态方法）
> 随着类的加载而加载
> 可以通过“类.静态方法”的方式，直接调用静态方法
> 静态方法内可以调用静态的属性或静态的方法
    不可以调用非静态的结构。（类的加载时机比非静态方法/属性要早）

> 补充：在非静态方法中，可以调用当前类中的静态属性和方法
> static修饰的方法中，不能使用this和super

5. 什么时候使用静态属性
> 当前类的多个实例共享此成员变量，且该成员变量值不变
> 常量一般声明为静态

    什么时候使用静态方法
    > 方法内操作的变量如果都是静态变量，则此方法建议声明为静态方法（工具类中的方法一般是静态的）